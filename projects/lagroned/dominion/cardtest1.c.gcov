        -:    0:Source:cardtest1.c
        -:    0:Graph:./cardtest1.gcno
        -:    0:Data:./cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Assignment 3 CS362 Unit Test 1
        -:    3: * 
        -:    4: */
        -:    5:
        -:    6:/* 
        -:    7: * File: cardtest1.c
        -:    8: * Author: Dustin LaGrone
        -:    9: * Created on October 18, 2018
        -:   10: */
        -:   11:
        -:   12:#define ASSERTTRUE(BoolCondition,__LINE__) do { if (!(BoolCondition)) { aFailed(__LINE__); } \
        -:   13:else{printf("ASSERTION TRUE! line:%d\n",__LINE__);}} while (0)
        -:   14:
        -:   15:#include <time.h>
        -:   16:#include <assert.h>
        -:   17:#include <stdio.h>
        -:   18:#include <stdlib.h>
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include "rngs.h"
        -:   22:
        -:   23:/*
        -:   24: * Simple C Test Suite
        -:   25: */
        -:   26:/*Part of the ASSERTTRUE test*/
function aFailed called 0 returned 0% blocks executed 0%
    #####:   27:void aFailed(int line){
        -:   28:    
    #####:   29:    printf("ASSERTION FALSE! line: %d\n",line);
call    0 never executed
    #####:   30:}
        -:   31:/*First test of the smithy card functionality*/
function test1 called 1 returned 100% blocks executed 81%
        1:   32:void test1() {
        -:   33:    int* bonus;
        -:   34:    int card, choice1, choice2, choice3, handPos, ret,r;
        -:   35:    struct gameState state;
        -:   36:    
        1:   37:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   38:                    remodel, smithy, village, baron, great_hall};
        -:   39:    
        -:   40:    
        -:   41:    /*Initialize Game*/
        1:   42:    memset(&state, 23, sizeof(struct gameState)); 
        -:   43:    
        1:   44:    r = initializeGame(2, k, 1, &state);
call    0 returned 100%
        -:   45:    /*Test that game was initialized*/
       1*:   46:    ASSERTTRUE(r != -1,__LINE__);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   47:
        -:   48:   /*Test the Hand Count for Each of the Two Players*/
        3:   49:    for(int i = 0; i < state.numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   50:        /*Adds an additional three cards with one discard*/
        2:   51:        state.whoseTurn = i;
        2:   52:        int storedHandCount = state.handCount[i]+2;
        2:   53:        int storedPlayedCard = state.playedCardCount;
        -:   54:        
        2:   55:        ret = cardEffect(smithy,0,0,0,&state,1, 0);
call    0 returned 100%
        -:   56:        
       2*:   57:        ASSERTTRUE(state.handCount[i] == storedHandCount,__LINE__);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   58:      
       2*:   59:        ASSERTTRUE(state.playedCardCount > storedPlayedCard ,__LINE__);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        2:   60:        printf("Current Played Count Player[%d]:%d\n",i,state.playedCardCount);
call    0 returned 100%
        -:   61:
        -:   62:    }
        -:   63:    
        1:   64:}
        -:   65:
function main called 1 returned 100% blocks executed 100%
        1:   66:int main(int argc, char** argv) {
        1:   67:    printf("%%SUITE_STARTING%% cardtest1\n");
call    0 returned 100%
        1:   68:    printf("%%SUITE_STARTED%%\n");
call    0 returned 100%
        -:   69:
        1:   70:    printf("%%TEST_STARTED%% test1 (cardtest1)\n");
call    0 returned 100%
        1:   71:    test1();
call    0 returned 100%
        1:   72:    printf("%%TEST_FINISHED%% test1 (cardtest1) \n");
call    0 returned 100%
        -:   73:
        -:   74: 
        1:   75:    printf("%%SUITE_FINISHED%% time=0\n");
call    0 returned 100%
        -:   76:
        1:   77:    return (EXIT_SUCCESS);
        -:   78:}
