        -:    0:Source:cardtest3.c
        -:    0:Graph:./cardtest3.gcno
        -:    0:Data:./cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Assignment 3 CS362 Unit Test 1
        -:    3: * 
        -:    4: */
        -:    5:
        -:    6:/* 
        -:    7: * File: cardtest3.c
        -:    8: * Author: Dustin LaGrone
        -:    9: * Created on October 18, 2018
        -:   10: */
        -:   11:
        -:   12:#define ASSERTTRUE(BoolCondition,__LINE__) do { if (!(BoolCondition)) { aFailed(__LINE__); } \
        -:   13:else{printf("ASSERTION TRUE! line:%d\n",__LINE__);}} while (0)
        -:   14:#include <time.h>
        -:   15:#include <time.h>
        -:   16:#include <assert.h>
        -:   17:#include <stdio.h>
        -:   18:#include <stdlib.h>
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include "rngs.h"
        -:   22:#include "interface.h"
        -:   23:/*
        -:   24: * Simple C Test Suite
        -:   25: */
        -:   26:/*Part of the ASSERTTRUE test*/
function aFailed called 0 returned 0% blocks executed 0%
    #####:   27:void aFailed(int line){
        -:   28:    
    #####:   29:    printf("ASSERTION FALSE! line: %d\n",line);
call    0 never executed
    #####:   30:}
        -:   31:/*First test of the village card functionality*/
function test1 called 1 returned 100% blocks executed 80%
        1:   32:void test1() {
        -:   33:   
        -:   34:    
        -:   35:    int card, choice1, choice2, choice3, handPosP1, handPosP2, ret,r;
        -:   36:    struct gameState state;
        -:   37:    
        1:   38:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   39:                    remodel, smithy, village, baron, great_hall};
        -:   40:    
        -:   41:    /*Random Game Initialization Borrowed from betterTestDrawCard.c*/
        1:   42:    memset(&state, 23, sizeof(struct gameState)); 
        -:   43:    
        -:   44:    /*Discard Hand Position*/
        1:   45:    int handPosPlayer = 1;
        -:   46:    /*Test that game was initialized*/
        1:   47:    r = initializeGame(2, k, 1, &state);
call    0 returned 100%
       1*:   48:    ASSERTTRUE(r != -1,__LINE__);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   49:    /*Stored discard Postion*/
        1:   50:    int cardtoDiscard = state.hand[0][handPosPlayer];
        -:   51:    /*Stored Number of Actions*/
        1:   52:    int numberOfAction = state.numActions;
        1:   53:    printf("Number of Actions: %d", numberOfAction);
call    0 returned 100%
        -:   54:    /*Test Village function Discard for selected card */
        -:   55: 
        1:   56:    int cardsInHand = state.handCount[0];
        -:   57:        
        -:   58:    /*Selection for hand position to be discarded used to compare discard piles in Adventurer*/
        1:   59:    cardEffect(village,0,0,0,&state,handPosPlayer, 0);
call    0 returned 100%
        -:   60:       
        -:   61:    /*Test Players Hand Before Against After to make sure they're equal*/
       1*:   62:    ASSERTTRUE(state.handCount[0] == cardsInHand,__LINE__);   
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   63:   
        -:   64:    /*Test the discard for the players hand and the played cards*/
        1:   65:    int sizeofPlayed = state.playedCardCount;
        2:   66:    for(int i = 0; i < sizeofPlayed; i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
       1*:   67:         ASSERTTRUE(state.playedCards[i] == cardtoDiscard,__LINE__);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   68:    }
        -:   69:    
        -:   70:    /*Test Number of Actions increases by two*/
        1:   71:    numberOfAction += 2;
       1*:   72:    ASSERTTRUE(numberOfAction == state.numActions,__LINE__);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        1:   73:    printf("Number of Actions: %d", state.numActions);
call    0 returned 100%
        1:   74:}
function main called 1 returned 100% blocks executed 100%
        1:   75:int main(int argc, char** argv) {
        1:   76:    printf("%%SUITE_STARTING%% cardtest3\n");
call    0 returned 100%
        1:   77:    printf("%%SUITE_STARTED%%\n");
call    0 returned 100%
        -:   78:
        1:   79:    printf("%%TEST_STARTED%% test1 (cardtest3)\n");
call    0 returned 100%
        1:   80:    test1();
call    0 returned 100%
        1:   81:    printf("%%TEST_FINISHED%% test1 (cardtest3) \n");
call    0 returned 100%
        -:   82:
        -:   83: 
        1:   84:    printf("%%SUITE_FINISHED%%\n");
call    0 returned 100%
        -:   85:
        1:   86:    return (EXIT_SUCCESS);
        -:   87:}
