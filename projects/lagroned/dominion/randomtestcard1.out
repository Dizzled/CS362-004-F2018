File 'randomTestCard1.c'
Lines executed:100.00% of 59
Branches executed:100.00% of 26
Taken at least once:92.31% of 26
Calls executed:93.75% of 32
Creating 'randomTestCard1.c.gcov'

        -:    0:Source:randomTestCard1.c
        -:    0:Graph:randomTestCard1.gcno
        -:    0:Data:randomTestCard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * This is a random tester of the Smithy card
        -:    3: * 
        -:    4: * 
        -:    5: */
        -:    6:
        -:    7:/* 
        -:    8: * File:   randomTestCard2.c
        -:    9: * Author: Dustin LaGrone
        -:   10: * November 11, 2018
        -:   11: */
        -:   12:
        -:   13:#include <time.h>
        -:   14:#include <assert.h>
        -:   15:#include <stdio.h>
        -:   16:#include <stdlib.h>
        -:   17:#include <string.h>
        -:   18:#include <math.h>
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include "rngs.h"
        -:   22:#define ASSERTTRUE(BoolCondition,__LINE__) do { if (!(BoolCondition)) { aFailed(__LINE__); } \
        -:   23:else{printf("ASSERTION TRUE! line:%d\n",__LINE__);}} while (0)
        -:   24:/*
        -:   25: * Simple C Test Suite
        -:   26: */
        -:   27:
        -:   28:/*Part of the ASSERTTRUE test*/
function aFailed called 88 returned 100% blocks executed 100%
       88:   29:void aFailed(int line){
        -:   30:    
       88:   31:    printf("ASSERTION FALSE! line: %d\n",line);
call    0 returned 100%
       88:   32:}
        -:   33:/*Function takes in Randomized game state and checks values for card*/
function checkSmithyCard called 10000 returned 100% blocks executed 97%
    10000:   34:int checkSmithyCard(int handPos, int player, struct gameState* post){
        -:   35:    
    10000:   36:    post->whoseTurn = player;
        -:   37:    struct gameState pre;
        -:   38:    
    10000:   39:    memcpy(&pre,post, sizeof(struct gameState));
        -:   40:    
    10000:   41:    int* storedDrawCards = (int*)malloc( 3 * sizeof(int));
    10000:   42:    int storedHandPos = post->hand[player][handPos];
    10000:   43:    int topOfDeck = post->deckCount[player] - 1;
        -:   44:    
        -:   45:    /*Check the stored drawn cards from the players deck vs the hand*/
    10000:   46:    if(post->deckCount[player] <= 0){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   47:        
       18:   48:        shuffle(player,&pre);
call    0 returned 100%
       18:   49:        topOfDeck = post->deckCount[player] - 1;
        -:   50:        
       72:   51:        for(int i = 0; i < 3; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   52:            
       54:   53:            storedDrawCards[i] = pre.deck[player][topOfDeck];
        -:   54:        }   
        -:   55:    }else{
        -:   56:        
    39928:   57:        for(int k = 0; k < 3; k++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
    29946:   58:            storedDrawCards[k] = pre.deck[player][topOfDeck];
    29946:   59:            topOfDeck--;
        -:   60:        }
        -:   61:    }
        -:   62:    
    10000:   63:    int drawncards = 0;
        -:   64:    
    10000:   65:    cardEffect(smithy,0,0,0,post,handPos, 0);
call    0 returned 100%
        -:   66:    
    10000:   67:    int handCount = post->handCount[player] - 1;
        -:   68:   
    40000:   69:    for(int k = 2; k >= 0; k--){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
    30000:   70:        if(storedDrawCards[k] == post->hand[player][handCount]){
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
    19917:   71:            printf("Draw cards Match Hand\n");
call    0 returned 100%
    19917:   72:            drawncards++;
    19917:   73:            handCount--;
        -:   74:         /*Test the discard function for the cards drawn being placed at handPos*/
    10083:   75:        }else if(storedDrawCards[k] == post->hand[player][handPos]){
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9945:   76:            printf("Draw cards Match Hand\n");
call    0 returned 100%
     9945:   77:            drawncards++;
        -:   78:        }
        -:   79:    }      
        -:   80:       
        -:   81:    /*Checks that three cards drawn from deck match cards in hand*/
    10000:   82:    ASSERTTRUE(drawncards == 3,__LINE__);
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
        -:   83:    
        -:   84:    /*Check that three cards were drawn with one discard*/
   10000*:   85:    ASSERTTRUE(pre.handCount[player] + 2 == post->handCount[player],__LINE__);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   86:    
        -:   87:    /*Check that the card from hand position was discarded*/
    10000:   88:    ASSERTTRUE(post->playedCards[post->playedCardCount - 1] == storedHandPos,__LINE__);
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
        -:   89:    
    10000:   90:    return 0;
        -:   91:    
        -:   92:}
function test1 called 1 returned 100% blocks executed 96%
        1:   93:void test1() {
        -:   94:
        -:   95:    struct gameState state;
        -:   96:    
        -:   97:        /*Random Game Initialization Borrowed from betterTestDrawCard.c*/
        1:   98:        SelectStream(2);
call    0 returned 100%
        1:   99:        PutSeed(3);
call    0 returned 100%
        -:  100:    
    10001:  101:    for(int numberOfRun = 0; numberOfRun <  10000; numberOfRun++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  102:        
    10000:  103:        int player = floor(Random() * 2);
call    0 returned 100%
        -:  104:        
        -:  105:        
        -:  106:            /*Modify the Deck with randomly initialized values
        -:  107:            * To check if the smithy draw function is drawing cards
        -:  108:            * from the top of the pile and shuffling them if the
        -:  109:            * deck is empty*/
        -:  110:        
    10000:  111:            state.deckCount[player] = floor(Random() * MAX_DECK);
call    0 returned 100%
    10000:  112:            state.discardCount[player] = floor(Random() * MAX_DECK);
call    0 returned 100%
    10000:  113:            state.playedCards[MAX_DECK] = floor(Random() * MAX_DECK);
call    0 returned 100%
    10000:  114:            state.handCount[player] = floor(Random() * MAX_HAND);
call    0 returned 100%
        -:  115:        
        -:  116:            /*Randomize each card in randomized hand count*/
  2524130:  117:            for(int k = 0; k < state.handCount[player]; k++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  118:            
  2514130:  119:                state.hand[player][k] = floor(Random() * 100);
call    0 returned 100%
        -:  120:            }
        -:  121:            
  2483836:  122:            for(int i = 0; i < state.deckCount[player]; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2473836:  123:                state.deck[player][i] = floor(Random() * 27);
call    0 returned 100%
        -:  124:            }
        -:  125:    
        -:  126:        
    10000:  127:            int handPos = floor(Random() * state.handCount[player]);
call    0 returned 100%
   10000*:  128:        ASSERTTRUE(checkSmithyCard(handPos, player, &state)== 0,__LINE__);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
        -:  129:        
        -:  130:        }
        1:  131:}
        -:  132:
        -:  133:
function main called 1 returned 100% blocks executed 100%
        1:  134:int main(int argc, char** argv) {
        -:  135:     
        1:  136:    printf("%%SUITE_STARTING%% randomtestcard2\n");
call    0 returned 100%
        -:  137:
        1:  138:    printf("%%TEST_STARTED%% test1\n");
call    0 returned 100%
        -:  139:    
        -:  140:    clock_t start, stop;
        -:  141:    
        1:  142:    start = clock();
call    0 returned 100%
        1:  143:    test1();
call    0 returned 100%
        1:  144:    stop = clock();
call    0 returned 100%
        -:  145:    
        1:  146:    double totalTime = ((double)(stop - start) / CLOCKS_PER_SEC);
        -:  147:   
        1:  148:    printf("%%TEST_FINISHED%% \n");
call    0 returned 100%
        -:  149:    
        1:  150:    printf("Time taken:%.3f\n", totalTime);
call    0 returned 100%
        -:  151:
        1:  152:    printf("%%SUITE_FINISHED%% \n");
call    0 returned 100%
        -:  153:
        1:  154:    return (EXIT_SUCCESS);
        -:  155:}
