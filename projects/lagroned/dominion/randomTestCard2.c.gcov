        -:    0:Source:randomTestCard2.c
        -:    0:Graph:randomTestCard2.gcno
        -:    0:Data:randomTestCard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * This is a random tester of the great hall
        -:    3: */
        -:    4:
        -:    5:/* 
        -:    6: * File:   randonTestCard3.c
        -:    7: * Author: root
        -:    8: *
        -:    9: * Created on November 13, 2018
        -:   10: */
        -:   11:
        -:   12:#define ASSERTTRUE(BoolCondition,__LINE__) do { if (!(BoolCondition)) { aFailed(__LINE__); } \
        -:   13:else{printf("ASSERTION TRUE! line:%d\n",__LINE__);}} while (0)
        -:   14:
        -:   15:#include <time.h>
        -:   16:#include <assert.h>
        -:   17:#include <stdio.h>
        -:   18:#include <stdlib.h>
        -:   19:#include <string.h>
        -:   20:#include <math.h>
        -:   21:#include "dominion.h"
        -:   22:#include "dominion_helpers.h"
        -:   23:#include "rngs.h"
        -:   24:#include "limits.h"
        -:   25:
        -:   26:/*
        -:   27: * Simple C Test Suite
        -:   28: */
        -:   29:
        -:   30:/*Part of the ASSERTTRUE test*/
function aFailed called 63 returned 100% blocks executed 100%
       63:   31:void aFailed(int line){
        -:   32:    
       63:   33:    printf("ASSERTION FALSE! line: %d\n",line);
call    0 returned 100%
       63:   34:}
        -:   35:
function checkGreatHall called 10000 returned 100% blocks executed 93%
    10000:   36:int checkGreatHall(int handPos, int player, struct gameState* post){
        -:   37:    
    10000:   38:    post->whoseTurn = player;
        -:   39:    struct gameState pre;
        -:   40:    
    10000:   41:    memcpy(&pre,post,sizeof(struct gameState));
        -:   42:    
        -:   43:    /*Stored discarded Card*/
    10000:   44:    int cardtoDiscard = pre.hand[player][handPos];
        -:   45:    /*Stored number of Actions*/
    10000:   46:    int numberOfAction = pre.numActions;
        -:   47:    /*Stored card to be drawn from deck*/
    10000:   48:    int drawnCard = pre.deck[player][pre.deckCount[player] - 1];
        -:   49:    
    10000:   50:    cardEffect(great_hall,0,0,0,post,handPos, 0);
call    0 returned 100%
        -:   51:    
        -:   52:    /*Test drawn card in players hand*/
    10000:   53:    ASSERTTRUE(drawnCard == post->hand[player][handPos],__LINE__);
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
        -:   54:    
    10000:   55:    if(post->hand[player][0] == -1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       20:   56:        printf("Hand Count Value: 0\nNo Cards in hand!!\n");
call    0 returned 100%
        -:   57:    }
        -:   58:    /*Test Number of actions*/
   10000*:   59:    ASSERTTRUE(numberOfAction + 1 == post->numActions,__LINE__);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   60:    /*Test discard pile for hand Pos card discarded*/
    10000:   61:    ASSERTTRUE(cardtoDiscard == post->playedCards[post->playedCardCount - 1],__LINE__);
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
        -:   62:    
    10000:   63:    return 0;
        -:   64:    
        -:   65:    
        -:   66:}
function test1 called 1 returned 100% blocks executed 96%
        1:   67:void test1() {
        -:   68:        
        -:   69:    
        -:   70:    struct gameState state;
        -:   71:    /*Random Game Initialization Borrowed from betterTestDrawCard.c*/
        1:   72:    SelectStream(2);
call    0 returned 100%
        1:   73:    PutSeed(3);  
call    0 returned 100%
        -:   74:    
        -:   75:    
    10001:   76:    for(int numberOfRun = 0; numberOfRun <  10000; numberOfRun++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   77:    
        -:   78:    
    10000:   79:    int  player = floor(Random() * 2);
call    0 returned 100%
        -:   80:        
        -:   81:    /*Modify the Deck with randomly initialized values
        -:   82:     * To check if the adventurer function is selecting 
        -:   83:     * Copper, Silver or Gold*/  
    10000:   84:    state.deckCount[player] = floor(Random() * MAX_DECK);
call    0 returned 100%
    10000:   85:    state.discardCount[player] = floor(Random() * MAX_DECK);
call    0 returned 100%
    10000:   86:    state.playedCardCount = floor(Random() * MAX_DECK);
call    0 returned 100%
    10000:   87:    state.handCount[player] = floor(Random() * MAX_HAND);
call    0 returned 100%
        -:   88:        
  2521685:   89:    for(int i = 0; i < state.deckCount[player]; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2511685:   90:        state.deck[player][i] = floor(Random() * 10);
call    0 returned 100%
        -:   91:    }
        -:   92:        
        -:   93:    /*Randomize each card in randomized hand count*/
  2535733:   94:    for(int k = 0; k < state.handCount[player]; k++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2525733:   95:        state.hand[player][k] = floor(Random() * 27);
call    0 returned 100%
        -:   96:    }
        -:   97:    
  2501540:   98:    for(int s = 0; s < state.playedCardCount; s++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2491540:   99:        state.playedCards[s] = floor(Random() * 27);
call    0 returned 100%
        -:  100:    }
        -:  101:        
        -:  102:    /*Randomize the positions in the players hand*/
    10000:  103:    int handPos = floor(Random() * state.handCount[player]);
call    0 returned 100%
   10000*:  104:    ASSERTTRUE(checkGreatHall(handPos, player, &state)== 0,__LINE__); 
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
        -:  105:   
        -:  106:    }
        1:  107:}
function main called 1 returned 100% blocks executed 100%
        1:  108:int main(int argc, char** argv) {
        -:  109:    
        1:  110:    printf("%%SUITE_STARTING%% randomTestCard3\n");
call    0 returned 100%
        1:  111:    printf("%%SUITE_STARTED%%\n");
call    0 returned 100%
        -:  112:
        1:  113:    printf("%%TEST_STARTED%% test1 (randomTestCard3)\n");
call    0 returned 100%
        -:  114:    
        -:  115:    clock_t start, stop;
        -:  116:    
        1:  117:    start = clock();
call    0 returned 100%
        1:  118:    test1();
call    0 returned 100%
        1:  119:    stop = clock();
call    0 returned 100%
        -:  120:    
        1:  121:    double totalTime = ((double)(stop - start) / CLOCKS_PER_SEC);
        -:  122:   
        1:  123:    printf("%%TEST_FINISHED%% \n");
call    0 returned 100%
        -:  124:    
        1:  125:    printf("Time taken:%.3f\n", totalTime);
call    0 returned 100%
        -:  126:
        1:  127:    printf("%%SUITE_FINISHED%%\n");
call    0 returned 100%
        -:  128:
        1:  129:    return (EXIT_SUCCESS);
        -:  130:}
