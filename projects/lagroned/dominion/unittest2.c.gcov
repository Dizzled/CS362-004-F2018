        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Assignment 3 CS362 Unit Test 2
        -:    3: */
        -:    4:
        -:    5:/* 
        -:    6: * File: unittest2.c
        -:    7: * Author: Dustin LaGrone
        -:    8: * Created on October 18, 2018
        -:    9: */
        -:   10:
        -:   11:
        -:   12:#define ASSERTTRUE(BoolCondition,__LINE__) do { if (!(BoolCondition)) { aFailed(__LINE__); } \
        -:   13:else{printf("ASSERTION TRUE! line:%d\n",__LINE__);}} while (0)
        -:   14:
        -:   15:#include <time.h>
        -:   16:#include <assert.h>
        -:   17:#include <stdio.h>
        -:   18:#include <stdlib.h>
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include "rngs.h"
        -:   22:
        -:   23:/*
        -:   24: * Simple C Test 
        -:   25: */
        -:   26:        
        -:   27:/*Added from testShuffle*/
        -:   28:int compare(const int* a, const int* b);
        -:   29:/*Part of Assertion Test*/
function aFailed called 30 returned 100% blocks executed 100%
       30:   30:void aFailed(int line){
        -:   31:    
       30:   32:    printf("ASSERTION FALSE! line: %d\n",line);
call    0 returned 100%
       30:   33:}
        -:   34:
function test1 called 1 returned 100% blocks executed 100%
        1:   35:void test1() {
        -:   36:   
        1:   37:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   38:	       remodel, smithy, village, baron, great_hall};
        -:   39:
        1:   40:  int returnedCost[10] = {};
        -:   41:  
        1:   42:  printf("Size of K: %d\n",sizeof(k)/sizeof(k[0]));
call    0 returned 100%
        -:   43:  
       11:   44:  for(int i = 0; i < sizeof(k)/sizeof(k[0]); i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:   45:      returnedCost[i] = getCost(k[i]);
call    0 returned 100%
       10:   46:      printf("Card Costs: %d\n", returnedCost[i]);
call    0 returned 100%
        -:   47:     
        -:   48:      /*Should return cost of six for Adventurer*/
       10:   49:      ASSERTTRUE(getCost(k[i]) == 6,__LINE__);
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
call    3 returned 100%
call    4 returned 100%
        -:   50:      /*Should return cost of five for Council Room*/
       10:   51:      ASSERTTRUE(getCost(k[i]) == 5,__LINE__);
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
call    3 returned 100%
call    4 returned 100%
        -:   52:      /*Should return cost of four for Feast*/
       10:   53:      ASSERTTRUE(getCost(k[i]) == 4,__LINE__);
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
call    3 returned 100%
call    4 returned 100%
        -:   54:      /*Should return cost of four for Gardens*/
       10:   55:      ASSERTTRUE(getCost(k[i]) == 3,__LINE__);    
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
call    3 returned 100%
call    4 returned 100%
        -:   56:  }
        1:   57:}
        -:   58:
        -:   59:
        -:   60:
function main called 1 returned 100% blocks executed 100%
        1:   61:int main(int argc, char** argv) {
        -:   62: 
        1:   63:    printf("%%SUITE_STARTING%% unittest1\n");
call    0 returned 100%
        1:   64:    printf("%%SUITE_STARTED%%\n");
call    0 returned 100%
        -:   65:    
        1:   66:    printf("%%TEST_STARTED%% test1 (unittest1)\n");
call    0 returned 100%
        -:   67:    
        1:   68:    test1();
call    0 returned 100%
        -:   69:    
        1:   70:    printf("%%TEST_FINISHED%%\n");
call    0 returned 100%
        -:   71:
        1:   72:    printf("%%SUITE_FINISHED%%\n");
call    0 returned 100%
        -:   73:
        1:   74:    return (EXIT_SUCCESS);
        -:   75:}
        -:   76:
